using System.Drawing;
using System.Text;
using System.Security.Cryptography;
using ACE.OmniChannel.FileSystem.Core.Remote;
using ACE.OmniChannel.Retail.UI;
using UI_Layer.Models;


namespace UI_Layer.Globalizer
{

    public class CommonMethods
    {
        public const string SessionShopStatus = "SessionShopStatus";
        public const string SessionShopStatusViber = "Viber";
        public const string SessionShopStatusFacebook = "Facebook";
        public const string SessionShopStatusECommerce = "E-commerce";
        public static string key = "Atmd@ACe2022";

        public static string ConvertToEncrypt(string psw)
        {
            if (string.IsNullOrEmpty(psw)) return "";
            psw += key;
            var pswByte = Encoding.UTF8.GetBytes(psw);
            return Convert.ToBase64String(pswByte);
        }
        public static string ConvertToDecrypt(string encodeData)
        {
            if (string.IsNullOrEmpty(encodeData)) return "";
            var encodeDataByte = Convert.FromBase64String(encodeData);
            var result = Encoding.UTF8.GetString(encodeDataByte);
            result = result.Substring(0, result.Length - key.Length);
            return result;
        }
        //public static string AutoGenerateNo(string lastGenerateNo,string generatetype) // Test Development
        //{
        //    var generatedate = DateTime.Now.ToString("yyyyMMdd");
        //    string invoiceNo;
        //    if (string.IsNullOrEmpty(lastGenerateNo))
        //    {
        //        invoiceNo = generatetype + generatedate+ "00001";
        //    }
        //    else
        //    {
        //        invoiceNo = lastGenerateNo.Substring(lastGenerateNo.Length - 5);         
        //        int newNo = Convert.ToInt32(invoiceNo) + 1;
        //        switch (newNo.ToString().Length)
        //        {
        //            case 1:
        //                invoiceNo = invoiceNo.Replace(invoiceNo,"0000" + newNo.ToString());
        //                break;
        //            case 2:
        //                invoiceNo = invoiceNo.Replace(invoiceNo, "000" + newNo.ToString());
        //                break;
        //            case 3:
        //                invoiceNo = invoiceNo.Replace(invoiceNo, "00" + newNo.ToString());
        //                break;
        //            case 4:
        //                invoiceNo = invoiceNo.Replace(invoiceNo, "0" + newNo.ToString());
        //                break;
        //            case 5:
        //                invoiceNo = invoiceNo.Replace(invoiceNo, newNo.ToString());
        //                break;
        //        }
        //        invoiceNo = generatetype + generatedate + invoiceNo;
        //    }
        //    return invoiceNo;
        //}
        //public static string AutoGenerateNoMain(string code,DateTime backdate,string createdUserID)
        //{            
        //    var transaction = unitOfWork.TransactionSetting.SelectByCode(code);
        //    var item = unitOfWork.AutogenerateItem.SelectByCode(transaction.ID.ToString());
        //    if (item == null)
        //    {
        //        return null;
        //    }
        //    else
        //    {
        //        string invoiceNo = "";
        //        DateTime today = DateTime.Today;

        //        if (item.BackDate)
        //        {
        //            var value = unitOfWork.AutogenerateValue.SelectByHeaderId(item.ID.ToString(), backdate);
        //            if (value == null)
        //            {
        //                invoiceNo = GetInvoiceNo(backdate, item.Prefix, item.Format1, item.Format2, item.Format3, item.Format, 0);
        //            }
        //            else
        //            {
        //                invoiceNo = GetInvoiceNo(backdate, item.Prefix, item.Format1, item.Format2, item.Format3, item.Format, value.AutogenerateLastValue);
        //            }
        //        }
        //        else
        //        {
        //            var value = unitOfWork.AutogenerateValue.SelectByHeaderId(item.ID.ToString(), today);
        //            if (value == null)
        //            {
        //                invoiceNo = GetInvoiceNo(today, item.Prefix, item.Format1, item.Format2, item.Format3, item.Format, 0);
        //                AutogenerateValueDM autoGenerateValue = new AutogenerateValueDM();
        //                autoGenerateValue.ID = Guid.NewGuid();
        //                autoGenerateValue.AutogenerateItemID = item.ID;
        //                autoGenerateValue.AutogenerateDate = today;
        //                autoGenerateValue.AutogenerateLastValue = 1;
        //                autoGenerateValue.CreatedUserID = Guid.Parse(createdUserID);
        //                autoGenerateValue.CreatedDate = today;
        //                autoGenerateValue.Active = true;
        //                unitOfWork.AutogenerateValue.Save(autoGenerateValue);
        //            }
        //            else
        //            {
        //                invoiceNo = GetInvoiceNo(today, item.Prefix, item.Format1, item.Format2, item.Format3, item.Format, value.AutogenerateLastValue);
        //                value.AutogenerateLastValue = value.AutogenerateLastValue + 1;
        //                value.UpdatedDate = today;
        //                value.UpdatedUserID = Guid.Parse(createdUserID);
        //                value.Active = true;
        //                unitOfWork.AutogenerateValue.UpdateEntity(value);
        //            }
        //        }
        //        return invoiceNo;
        //    }
        //}
        //private static string GetInvoiceNo(DateTime date, string prefix, string format1, string format2, string format3, int format, int val)
        //{
        //    string year = date.Year.ToString();
        //    string month = date.Month.ToString("00");
        //    string day = date.Day.ToString("00");
        //    switch (format1)
        //    {
        //        case "yyyy": format1 = year; break;
        //        case "mm": format1 = month; break;
        //        case "dd": format1 = day; break;
        //        default: break;
        //    }
        //    switch (format2)
        //    {
        //        case "yyyy": format2 = year; break;
        //        case "mm": format2 = month; break;
        //        case "dd": format2 = day; break;
        //        default: break;
        //    }
        //    switch (format3)
        //    {
        //        case "yyyy": format3 = year; break;
        //        case "mm": format3 = month; break;
        //        case "dd": format3 = day; break;
        //        default: break;
        //    }
        //    string count = "000000000" + (val + 1);
        //    string v = count.Substring(count.Length - format, format);
        //    string invoiceNo = prefix + format1 + format2 + format3 + v;
        //    return invoiceNo;
        //}
        public static string message;
        public static string GetInnerException(Exception ex, string mes)
        {
            message = ex.Message;
            if (ex.InnerException != null)
            {
                message = ex.Message;
                GetInnerException(ex.InnerException, mes);


            }
            if (message.Contains("foreign key"))
            {
                message = mes;
            }
            // message =(_webHostEnvironment.EnvironmentName.Equals("Development") ? message : _localizer["MI00017"].ToString());
            return message;


        }

        //public async static Task<string> SendSaleOrderDetail(IUnitOfWork _unitOfWork, IWebHostEnvironment _webHostEnvironment,string trackorderUrl, NumberFormatInfo nfi, string urlPath, EmailSender _emailSender, string orderID, CompanyInformationViewModel companyInformation)
        //{
        //    try
        //    {
        //        var saleOrderViewModel = _unitOfWork.TSaleOrder.SelectOrderDetailsByID(orderID);
        //        var paymenttypeDM = _unitOfWork.PaymentMethod.SelectByID(saleOrderViewModel.PaymentTypeID);
        //        var webRoot = _webHostEnvironment.WebRootPath;
        //        var pathToFile = $"{webRoot}//emailtemplate//SaleOrderEmail.html";
        //        var subject = "Thank you for your order";
        //        var builder = new BodyBuilder();
        //        using (StreamReader SourceReader = System.IO.File.OpenText(pathToFile))
        //        {
        //            builder.HtmlBody = SourceReader.ReadToEnd();
        //        }                
        //        string css_str = ".header-companyname,.header-info,.item-name{font-style:normal;line-height:19px;font-weight:400;font-family:Helvetica,Arial,sans-serif!important;letter-spacing:.5px}.productImage{width:150px;height:150px}.header-companyname{margin-left:10px}.header-info{color:#b99783;font-size:16px}.item-info{width:100%;margin-top:10px}.item-name{margin-top:10px;color:#f36d2e;font-size:16px;valign:middle;align:left}.track-button{text-decoration:none;background:#f0c135;color:#fff;font-weight:700;font-size:16px;padding:12px}";                
        //        string messageBody = string.Format(builder.HtmlBody,
        //                            css_str,
        //                            saleOrderViewModel.ReceivePersonName,
        //                            companyInformation.CompanyName_LNG1,
        //                            DateTime.Now.ToString("dd-MM-yyyy"),
        //                            companyInformation.CompanyAddress,
        //                            companyInformation.PhoneNumber,
        //                            companyInformation.Email,
        //                            saleOrderViewModel.DeliveryAddress,
        //                            saleOrderViewModel.ContactPhoneNo,
        //                            saleOrderViewModel.ContactEmailAddress,
        //                            saleOrderViewModel.InvoiceNo,
        //                            paymenttypeDM.Description,
        //                            (saleOrderViewModel.Amount).ToString("#,0", nfi), //sub Total 
        //                            (saleOrderViewModel.TaxAmount).ToString("#,0", nfi),//Tax
        //                            (saleOrderViewModel.ShippingCharges).ToString("#,0", nfi),//Shipping Charges //(saleOrderViewModel.Amount + saleOrderViewModel.TaxAmount + saleOrderViewModel.ShippingCharges).ToString("#,0", nfi) //Total Amount
        //                            (saleOrderViewModel.Amount + saleOrderViewModel.ShippingCharges).ToString("#,0", nfi), //Total Amount
        //                            trackorderUrl,//TrackUrl
        //                            saleOrderViewModel.SaleOrderDueDate.ToString("yyyy-MMM-dd")
        //                            );
        //        string replace = "<tbody id='acebody'></tbody>";
        //        string replace_str = "";
        //        string imgurl = "";
        //        foreach (var item in saleOrderViewModel.saleOrderItems)
        //        {
        //            //imgurl = $"{urlPath}image/Product/{item.MainStockImage}";
        //            imgurl = $"{urlPath}/OCRH/" + companyInformation.CompanyName_LNG1 + "/image/Product/" +item.MainStockImage;
        //            replace_str = replace_str + "<tr style='outline: 2px solid #ececec'> " +
        //                           "<td style='width: 180px; vertical-align:middle;'><img src='" + imgurl + "' class='productImage' alt=''></td>" +
        //                           "<td valign='top' align='left'>" +
        //                           "<table class='item-info'>" +
        //                           "<tbody>" +
        //                           "<tr><td class='item-name'>" + item.StockName_LNG1 + "</td></tr>" +
        //                           "<tr><td style='color: #b99783; font-size: 16px; font-style: normal; line-height: 19px; font-weight: 400; font-family: 'Helvetica','Arial',sans-serif !important; letter-spacing: 0.5px' valign='middle' align='left'>" + item.SellingPrice.ToString("#,0", nfi) + " MMK</td></tr>" +
        //                           "<tr><td style='color: #b99783; font-size: 16px; font-style: normal; line-height: 19px; font-weight: 400; font-family: 'Helvetica','Arial',sans-serif !important; letter-spacing: 0.5px' valign='middle' align='left'>Quantity : " + item.Quantity.ToString("#,0", nfi) + "</td></tr>" +
        //                           "<tr><td style='color: #b99783; font-size: 16px; font-style: normal; line-height: 19px; font-weight: 400; font-family: 'Helvetica','Arial',sans-serif !important; letter-spacing: 0.5px' valign='middle' align='left'>Total Amount : " + (item.SellingPrice * item.Quantity).ToString("#,0", nfi) + " MMK</td></tr>" +
        //                            "</tbody>" +
        //                            "</table>" +
        //                            "</td>" +
        //                            "</tr>";
        //        }
        //        replace_str = "<tbody id='acebody'>" + replace_str + "</tbody>";

        //        messageBody = messageBody.Replace(replace, replace_str);
        //        await _emailSender.SendEmailAsync(saleOrderViewModel.ContactEmailAddress, subject, messageBody);
        //        return "";
        //    }
        //    catch (Exception ex)
        //    {
        //        return Globalizer.CommonMethods.GetInnerException(ex, "_localizer['MI00023'].ToString()");
        //    }
        //}

        //public async static Task<string> SendUserInvitation(string callback,ApplicationUser receiveUser, ApplicationUser sender, IWebHostEnvironment _webHostEnvironment, string urlPath, EmailSender _emailSender,CompanyInformationViewModel companyInformation)
        //{
        //    try
        //    {             
        //        var webRoot = _webHostEnvironment.WebRootPath;
        //        var pathToFile = $"{webRoot}//emailtemplate//UserInvite.html";
        //        var subject = "Invitation Letter";                

        //        var builder = new BodyBuilder();
        //        using (StreamReader SourceReader = System.IO.File.OpenText(pathToFile))
        //        {
        //            builder.HtmlBody = SourceReader.ReadToEnd();
        //        }
        //        string css_str = ".header-companyname,.header-info,.item-name{font-style:normal;line-height:19px;font-weight:400;font-family:Helvetica,Arial,sans-serif!important;letter-spacing:.5px}.productImage{width:150px;height:150px}.header-companyname{margin-left:10px}.header-info{color:#534f4d;font-size:16px}";
        //        string headerbg = ".hederbg {align-items: center;justify-content: center;background-size: 300% 300%;background-image: linear-gradient(-45deg,rgb(59, 173, 227) 0%,rgb(87, 111, 230) 25%,rgba(152, 68, 183, 0.47) 51%,rgba(53, 255, 122, 0.74) 100%);animation: AnimateBG 20s ease infinite;}";
        //        string bodybg = ".bodybg {align-items: center;justify-content: center;background-size: 300% 300%;background-image: linear-gradient( -45deg, rgba(59,173,227,1) 0%, rgba(94,169,127,0.32) 25%, rgba(215,182,127,1.00) 51%, rgba(84,179,127,1.00) 100% );animation: AnimateBG 20s ease infinite;}";
        //        string AnimateBG = "@keyframes AnimateBG {0% {background-position: 0% 50%}50% {background-position: 100% 50%}100% {background-position: 0% 50%}}";
        //        string messageBody = string.Format(builder.HtmlBody,
        //                            $"{css_str}{headerbg}{bodybg}{AnimateBG}",
        //                            //$"{urlPath}/image/Company_Information/{companyInformation.CompanyLogoName}", //ImageSrc
        //                            $"{urlPath}/OCRH/" + companyInformation.CompanyName_LNG1 + "/image/Company_Information/" +companyInformation.CompanyLogoName, //ImageSrc
        //                            companyInformation.CompanyName_LNG1,
        //                            companyInformation.CompanyAddress,                                    
        //                            companyInformation.PhoneNumber,
        //                            companyInformation.Email,
        //                            DateTime.Now.ToString("dd-MM-yyyy"),
        //                            receiveUser.UserName,
        //                             "<a href=\"" + callback + "\">click here</a>",
        //                            companyInformation.CompanyName_LNG1,
        //                            sender.UserName,
        //                            receiveUser.UserName,
        //                            receiveUser.Email
        //                            );   
        //        await _emailSender.SendEmailAsync(receiveUser.Email, subject, messageBody);
        //        return "";
        //    }
        //    catch (Exception ex)
        //    {
        //        throw;
        //        //return Globalizer.CommonMethods.GetInnerException(ex, _localizer["MI00023"].ToString());
        //    }
        //}

        //public async static Task<string> SendRegisterSuccess(ApplicationUser receiverInfo ,IWebHostEnvironment _webHostEnvironment, string urlPath, EmailSender _emailSender, CompanyInformationViewModel companyInformation)
        //{
        //    try
        //    {
        //        var webRoot = _webHostEnvironment.WebRootPath;
        //        var pathToFile = $"{webRoot}//emailtemplate//RegisterSuccess.html";
        //        var subject = "Register Success";

        //        var builder = new BodyBuilder();
        //        using (StreamReader SourceReader = System.IO.File.OpenText(pathToFile))
        //        {
        //            builder.HtmlBody = SourceReader.ReadToEnd();
        //        }
        //        string css_str = ".header-companyname,.header-info,.item-name{font-style:normal;line-height:19px;font-weight:400;font-family:Helvetica,Arial,sans-serif!important;letter-spacing:.5px}.productImage{width:150px;height:150px}.header-companyname{margin-left:10px}.header-info{color:#534f4d;font-size:16px}";
        //        string headerbg = ".hederbg {align-items: center;justify-content: center;background-size: 300% 300%;background-image: linear-gradient(-45deg,rgb(59, 173, 227) 0%,rgb(87, 111, 230) 25%,rgba(152, 68, 183, 0.47) 51%,rgba(53, 255, 122, 0.74) 100%);animation: AnimateBG 20s ease infinite;}";
        //        string bodybg = ".bodybg {align-items: center;justify-content: center;background-size: 300% 300%;background-image: linear-gradient( -45deg, rgba(59,173,227,1) 0%, rgba(94,169,127,0.32) 25%, rgba(215,182,127,1.00) 51%, rgba(84,179,127,1.00) 100% );animation: AnimateBG 20s ease infinite;}";
        //        string AnimateBG = "@keyframes AnimateBG {0% {background-position: 0% 50%}50% {background-position: 100% 50%}100% {background-position: 0% 50%}}";
        //        string messageBody = string.Format(builder.HtmlBody,
        //                            $"{css_str}{headerbg}{bodybg}{AnimateBG}",
        //                            $"{urlPath}/OCRH/" + companyInformation.CompanyName_LNG1 + "/image/Company_Information/" + companyInformation.CompanyLogoName, //ImageSrc
        //                            companyInformation.CompanyName_LNG1,
        //                            companyInformation.CompanyAddress,
        //                            companyInformation.PhoneNumber,
        //                            companyInformation.Email,
        //                            DateTime.Now.ToString("dd-MM-yyyy"),
        //                            receiverInfo.FullName,
        //                            receiverInfo.UserName,
        //                            receiverInfo.Email,
        //                            companyInformation.CompanyName_LNG1
        //                            );
        //        await _emailSender.SendEmailAsync(receiverInfo.Email, subject, messageBody);
        //        return "";
        //    }
        //    catch (Exception ex)
        //    {
        //        throw;
        //        //return Globalizer.CommonMethods.GetInnerException(ex, _localizer["MI00023"].ToString());
        //    }
        //}
        //public static string getHMAC_MPU(string signatureString, string secretKey)
        //{
        //    System.Text.UTF8Encoding encoding = new System.Text.UTF8Encoding();
        //    byte[] keyByte = encoding.GetBytes(secretKey);
        //    HMACSHA1 hmac = new HMACSHA1(keyByte);
        //    byte[] messageBytes = encoding.GetBytes(signatureString);
        //    byte[] hashmessage = hmac.ComputeHash(messageBytes);
        //    return ByteArrayToHexString_MPU(hashmessage);
        //}

        public static string ByteArrayToHexString_MPU(byte[] Bytes)
        {
            string HexAlphabet = "0123456789ABCDEF";
            StringBuilder Result = new StringBuilder();
            foreach (byte B in Bytes)
            {
                Result.Append(HexAlphabet[(int)(B >> 4)]);
                Result.Append(HexAlphabet[(int)(B & 0xF)]);
            }
            return Result.ToString();
        }

        public static string ChangeAmountFormat_MPU(string amount)
        {
            string _strAmt = Convert.ToString(Convert.ToInt32(Convert.ToDecimal(amount) * 100));
            return _strAmt.PadLeft(12, '0');
        }

        //public static async Task<MPUPaymentViewModel> payment(SaleOrderViewModel viewModel, IUnitOfWork _unitOfWork,string appurl)
        //{           
        //    string SECURE_SECRET = "B948EF408E03D6BC57F7CFF39AA7B079";
        //    string SECURE_SECRET_MPU = "1VGTTBMMPJH0BRXU4JRDUMFXSFXZOQTD";//"X00V2KCVAHXUPFMIVBEDM4WVJEGUBNSB";
        //    var paymentTypeDM = _unitOfWork.PaymentMethod.SelectByID(viewModel.PaymentID);
        //    var paymentCode = paymentTypeDM.Code;
        //    var paymentURL = "http://localhost:54558/FormTest/HTTPOST";// "https://www.mpu-ecommerce.com/Payment/Payment/pay";//
        //    var merchantID = "206104000002105";
        //    var currencyCode = "104";
        //    var productDesc = "ACE Omni-Channel Retail Hub"; // Need to change about product description max char(50)
        //    var UserDefined1 = paymentCode;
        //    var UserDefined2 = "";
        //    var UserDefined3 = "";
        //    var amount = Globalizer.CommonMethods.ChangeAmountFormat_MPU((viewModel.Amount + viewModel.ShippingCharges).ToString());

        //    List<string> input_field_list = new List<string>();
        //    //input_field_list.Add("2.4");
        //    input_field_list.Add(merchantID);
        //    input_field_list.Add(viewModel.SaleOrderNo);
        //    input_field_list.Add(productDesc);
        //    input_field_list.Add(amount);
        //    input_field_list.Add(currencyCode);
        //    input_field_list.Add(UserDefined1);
        //    input_field_list.Add(UserDefined2);
        //    input_field_list.Add(UserDefined3);
        //    //input_field_list.Add(appurl);
        //    //input_field_list.Add(appurl);
        //    input_field_list.Sort();
        //    var SignatureString = string.Empty;
        //    foreach (String value in input_field_list)
        //    {
        //        SignatureString += value;
        //    }
        //    var SecureHash = Globalizer.CommonMethods.getHMAC_MPU(SignatureString, SECURE_SECRET_MPU);
        //    MPUPaymentViewModel mPUPaymentViewModel = new MPUPaymentViewModel();
        //    mPUPaymentViewModel.merchantID = merchantID;
        //    mPUPaymentViewModel.invoiceNo = viewModel.SaleOrderNo;
        //    mPUPaymentViewModel.productDesc = productDesc;
        //    mPUPaymentViewModel.amount = amount;
        //    mPUPaymentViewModel.currencyCode = currencyCode;
        //    mPUPaymentViewModel.userDefined1 = UserDefined1;
        //    mPUPaymentViewModel.userDefined2 = UserDefined2;
        //    mPUPaymentViewModel.userDefined3 = UserDefined3;
        //    mPUPaymentViewModel.hashValue = SecureHash;
        //    mPUPaymentViewModel.FrontendURL = appurl;
        //    mPUPaymentViewModel.BackendURL = appurl;
        //    mPUPaymentViewModel.Version = "2.4";
        //    mPUPaymentViewModel.PaymentURL = paymentURL;
        //    return mPUPaymentViewModel;
        //}

        public static string EncryptSHA2_256(string hashString)
        {
            using (SHA256 sha256Hash = SHA256.Create())
            {
                SHA256Managed hasher = new SHA256Managed();
                byte[] pwdBytes = new UTF8Encoding().GetBytes(hashString);
                byte[] keyBytes = hasher.ComputeHash(pwdBytes);
                hasher.Dispose();
                return ByteArrayToHexString_MPU(keyBytes);
            }
        }


        //public static CompanyInformationViewModel GetCurrentCompanyInformation(IUnitOfWork _unitOfWork)
        //{
        //    return _unitOfWork.CompanyInformation.SelectAll().Select(s=> new CompanyInformationViewModel()
        //    { 
        //       ID = s.ID.ToString(),
        //    CompanyName_LNG1 = s.CompanyName_LNG1,
        //    CompanyName_LNG2 = s.CompanyName_LNG2,
        //    PhoneNumber = s.PhoneNumber,
        //    Email = s.Email,
        //    ContactPerson = s.ContactPerson,      
        //    Township = s.Township,
        //    LimitHour = s.OrderCanceclLimitHours,
        //    StreetNumber_Name = s.StreetNumber_Name,
        //    CompanyAddress = s.CompanyAddress,
        //    FacebookLink = s.FacebookLink,
        //    CompanyLogoName = s.CompanyLogo
        //    }).FirstOrDefault();
          
        //}
        //public static string GetViberToken(IUnitOfWork _unitOfWork)
        //{
        //    try
        //    {
        //        var companyinfo = Globalizer.CommonMethods.GetCurrentCompanyInformation(_unitOfWork);
        //        var viberbot = _unitOfWork.ViberBotInformation.SelectByCompanyId(companyinfo.ID);
        //        var viberToken = (viberbot == null ? "" : viberbot.Token);
        //        return viberToken;
        //    }
        //    catch (Exception ex)
        //    {
        //        return "";
        //    }
        //}


        public static async Task<string> FTPServerAction(bool adminPermission, IFormFile file)
        {

            try
            {

                RemoteSystemSetting setting = new RemoteSystemSetting()
                {
                    Host = "bi2ftpgeneral.acedatasystems.com",
                    Port = 21,
                    UserName = (adminPermission ? "bi2ftpgeneral.acedatasystems.com|FTPAdmin" : "bi2ftpgeneral.acedatasystems.com|FTPUser"),
                    Password = (adminPermission ? "ftpAdmin@41" : "ftpUser@41"),
                    
                };
                IRemoteFileSystemContext remote = new FtpRemoteFileSystem(setting);
                remote.Connect();                                       /*establish connection*/
                remote.SetRootAsWorkingDirectory();                    /*set root as work directory*/
                bool isConnected = remote.IsConnected();                /*check connection done or not*/
                remote.CreateDirectoryIfNotExists("/00OCRH/00ACEDataSystems/");
                if (file.Length > 0)
                {
                    //if (await ImageResizeAndCompress.ImageResize(file, "Stock", file.FileName))
                    //{
                    //    return "Please Check For Image Size.!";
                    //}
                }



                remote.Disconnect();                                    /*stop connection*/
                remote.Dispose();


                return "";
            }
            catch (Exception)
            {

                throw;
            }
        }


        public static string FTPServerConnection(bool adminPermission)
        {
            try
            {
                RemoteSystemSetting setting = new RemoteSystemSetting()
                {
                    Host = "bi2ftpgeneral.acedatasystems.com",
                    Port = 21,
                    UserName = (adminPermission ? "bi2ftpgeneral.acedatasystems.com|FTPAdmin" : "bi2ftpgeneral.acedatasystems.com|FTPUser"),
                    Password = (adminPermission ? "ftpAdmin@41" : "ftpUser@41"),

                };
                IRemoteFileSystemContext remote = new FtpRemoteFileSystem(setting);
                remote.Connect();                                       /*establish connection*/
                return "";
            }
            catch (Exception ex)
            {
                return "";
                //throw;
            }
        }


        public static void DeleteDirectory(string folderPath,IConfiguration configuration)
        {
            var setting = GetFTPSetting(configuration);
            IRemoteFileSystemContext remote = new FtpRemoteFileSystem(setting);
            remote.Connect();                                       /*establish connection*/
            bool isConnected = remote.IsConnected();                /*check connection done or not*/
            remote.DeleteDirectoryIfExists(folderPath);
            remote.Disconnect();                                    /*stop connection*/
            remote.Dispose();
        }
        public static void DeleteFile(string filePath, IConfiguration configuration)
        {
            var setting = GetFTPSetting(configuration);
            IRemoteFileSystemContext remote = new FtpRemoteFileSystem(setting);
            remote.Connect();                                       /*establish connection*/
            bool isConnected = remote.IsConnected();                /*check connection done or not*/
            remote.DeleteFileIfExists(filePath);
            remote.Disconnect();                                    /*stop connection*/
            remote.Dispose();
        }
        public static void CopyDirectory(string localPath, string ftpPath, string sourceFolderPath, string destinationFolderPath,IConfiguration configuration)
        {
            var setting = GetFTPSetting(configuration);
            IRemoteFileSystemContext remote = new FtpRemoteFileSystem(setting);
            remote.Connect();                                       /*establish connection*/
            bool isConnected = remote.IsConnected();                /*check connection done or not*/
            remote.CreateDirectoryIfNotExists(destinationFolderPath);
            remote.CopyDirectory(localPath, ftpPath, sourceFolderPath, destinationFolderPath);

            remote.Disconnect();                                    /*stop connection*/
            remote.Dispose();
        }
        public static void MoveDirectory(string localPath,string ftpPath,string sourceFolderPath, string destinationFolderPath, IConfiguration configuration)
        {
            var setting = GetFTPSetting(configuration);
            IRemoteFileSystemContext remote = new FtpRemoteFileSystem(setting);
            remote.Connect();                                       /*establish connection*/
            bool isConnected = remote.IsConnected();                /*check connection done or not*/
            remote.CreateDirectoryIfNotExists(destinationFolderPath);
            remote.MoveDirectory(localPath,ftpPath, sourceFolderPath, destinationFolderPath);

            remote.Disconnect();                                    /*stop connection*/
            remote.Dispose();
        }

        public static string[] GetImagesForAdvContent(string folderPath,IConfiguration configuration)
        {
            var setting = GetFTPSetting(configuration);
            IRemoteFileSystemContext remote = new FtpRemoteFileSystem(setting);
            remote.Connect();                                       /*establish connection*/
            bool isConnected = remote.IsConnected();                /*check connection done or not*/
            var fileNameList =remote.GetNameListing(folderPath);
            remote.Disconnect();                                    /*stop connection*/
            remote.Dispose();

            return fileNameList;
        }

        public static RemoteSystemSetting GetFTPSetting(IConfiguration configuration)
        {
            RemoteSystemSetting setting = new RemoteSystemSetting()
            {
                Host = configuration.GetSection("ImagePath:LocalPath").Value,
                UserName = configuration.GetSection("FTPUser").Value,
                Password = configuration.GetSection("FTPPassword").Value,

            };
            return setting;
        }
    }
}
